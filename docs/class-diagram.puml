@startuml
title Diagramme de Classes - Système Zalagh Plancher

skinparam class {
  BackgroundColor #F0F8FF
  BorderColor #4682B4
}
skinparam package {
  BackgroundColor #E6F3FF
  BorderColor #4F81BD
}

package "Entités Principales" {
  class Admin {
    - id: UUID
    - nom: String
    - prenom: String
    - email: String
    - mdp_hash: String
    - created_at: Timestamp
    + authenticate(password: String): Boolean
    + createEmployee(data: Object): Employee
    + approveDemande(demandeId: UUID): Boolean
    + generateReport(): Report
  }

  class Employee {
    - id: Integer
    - nom: String
    - prenom: String
    - secteur: String
    - email: String
    - mdp_hash: String
    - adminref: UUID
    - created_at: Timestamp
    + authenticate(password: String): Boolean
    + createDemande(data: Object): Demande
    + uploadFile(file: File): String
    + signDocument(pdfPath: String): String
  }

  class Demande {
    - iddemande: UUID
    - nom: String
    - prenom: String
    - telephone: String
    - type_projet: String
    - plan_jpg: String
    - prix: Decimal
    - statut: String
    - pdf_path: String
    - pdf_signe_path: String
    - created_at: Timestamp
    + generatePDF(): String
    + updateStatus(status: String): Boolean
    + addSignature(signedPath: String): Boolean
  }

  class MatierePremiere {
    - id: UUID
    - type_matiere: String
    - date_entree: Date
    - qte: Decimal
    - created_at: Timestamp
    + addQuantity(qte: Decimal): Boolean
    + updateQuantity(qte: Decimal): Boolean
  }
}

package "Système de Communication" {
  class Notification {
    - id: UUID
    - employee_id: Integer
    - title: String
    - body_html: String
    - created_at: Timestamp
    - read_at: Timestamp
    - taken_at: Timestamp
    - created_by_admin: UUID
    + markAsRead(): Boolean
    + markAsTaken(): Boolean
    + addReply(reply: NotificationReply): Boolean
  }

  class NotificationReply {
    - id: UUID
    - notification_id: UUID
    - sender_type: String
    - sender_employee_id: Integer
    - sender_admin_id: UUID
    - body: String
    - created_at: Timestamp
    + getSender(): Object
  }
}

package "Services" {
  class AuthService {
    + login(email: String, password: String): Token
    + verifyToken(token: String): User
    + hashPassword(password: String): String
    + generateJWT(user: Object): String
  }

  class FileService {
    + uploadImage(file: File): String
    + uploadPDF(file: File): String
    + generatePDFQuote(demande: Demande): String
    + signPDF(pdfPath: String, signature: String): String
  }

  class DatabaseService {
    + connect(): Connection
    + query(sql: String, params: Array): Result
    + transaction(callback: Function): Result
    + close(): Boolean
  }
}

package "Contrôleurs" {
  class AuthController {
    + login(req: Request, res: Response): void
    + logout(req: Request, res: Response): void
    + register(req: Request, res: Response): void
  }

  class EmployeeController {
    + getProfile(req: Request, res: Response): void
    + updateProfile(req: Request, res: Response): void
    + createDemande(req: Request, res: Response): void
    + getDemandes(req: Request, res: Response): void
  }

  class AdminController {
    + getEmployees(req: Request, res: Response): void
    + createEmployee(req: Request, res: Response): void
    + approveDemande(req: Request, res: Response): void
    + generateReport(req: Request, res: Response): void
  }

  class FileController {
    + uploadImage(req: Request, res: Response): void
    + uploadPDF(req: Request, res: Response): void
    + downloadFile(req: Request, res: Response): void
  }
}

' Relations principales
Admin ||--o{ Employee : "gère"
Employee ||--o{ Demande : "crée"
Admin ||--o{ Demande : "approuve"
Employee ||--o{ Notification : "reçoit"
Admin ||--o{ Notification : "crée"
Notification ||--o{ NotificationReply : "contient"

' Relations avec les services
AuthController ..> AuthService : "utilise"
EmployeeController ..> Employee : "gère"
AdminController ..> Admin : "gère"
FileController ..> FileService : "utilise"
AuthService ..> DatabaseService : "utilise"
FileService ..> DatabaseService : "utilise"

' Relations de composition
Demande *-- MatierePremiere : "utilise"

@enduml
